{"version":3,"sources":["webpack:///src/app/outros/register/register.page.html","webpack:///src/app/outros/register/register-routing.module.ts","webpack:///src/app/outros/register/register.module.ts","webpack:///src/app/outros/register/register.page.scss","webpack:///src/app/outros/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","formBuilder","userService","isSubmitted","registerForm","group","nomeUsr","required","snUsr","usernameUsr","emailUsr","pattern","celularUsr","passwd","minLength","maxLength","confirmPasswd","isActive","issync","validator","matchingPasswords","bind","valid","console","log","hash","create","update","value","hex","userCreate","username","nome","sobrenome","email","celular","senha","createUserMongoDB","subscribe","response","err","formGroup","get","password","confirmPassword","passwordNotMatch","controls","selector","template"],"mappings":"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","file":"outros-register-register-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"danger\\\">\\n    <ion-title>Criar Conta</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content color=\\\"tertiary\\\">\\n  <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\" novalidate>\\n    <ion-grid>\\n      <ion-row color=\\\"tertiary\\\" justify-content-center>\\n        <ion-col align-self-center size-md=\\\"6\\\" size-lg=\\\"5\\\" size-xs=\\\"12\\\" style=\\\"margin: 0px auto 0px auto !important;\\\">\\n          <div padding>\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Nome do Usuario</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o novo nome do usuario\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"nomeUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.nomeUsr.errors?.required\\\">\\n              *É nescessario o nome do usuario\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Sobrenome do Usuario</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o sobrenome do Usuario\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"snUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.snUsr.errors?.required\\\">\\n              *É nescessario o sobrenome do usuario\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Username</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o username do usuario\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"usernameUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.usernameUsr.errors?.required\\\">\\n              *É nescessario o username\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Email</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o email\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"emailUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.emailUsr.errors?.required\\\">\\n              *É nescessario o email\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.emailUsr.errors?.pattern\\\">\\n              *Email invalido\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Celular</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o celular\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"celularUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.celularUsr.errors?.required\\\">\\n              *É nescessario o celular\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.celularUsr.errors?.pattern\\\">\\n              *Celular invalido\\n            </ion-text>\\n\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Senha</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite a senha\\\" required=\\\"true\\\" type=\\\"password\\\" formControlName=\\\"passwd\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.passwd.errors?.required\\\">\\n              *É nescessario a senha\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && (errorControl.passwd.errors?.pattern || errorControl.passwd.errors?.minLength || errorControl.passwd.errors?.maxLength)\\\">\\n              *É nescessario que a senha tenha entre 6 a 30 caracteres, pelo menos uma letra maiuscula, uma letra minuscula, um numero e um caractere especial\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Confirme a Senha</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Confirme a senha\\\" required=\\\"true\\\" type=\\\"password\\\" formControlName=\\\"confirmPasswd\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && !registerForm.get('confirmPasswd').errors && registerForm.hasError('passwordNotMatch') && (registerForm.get('confirmPasswd').dirty || registerForm.get('confirmPasswd').touched)\\\">\\n              *A confirmação tem que ser igual a senha\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.confirmPasswd.errors?.required\\\">\\n              *Confirme a senha\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && (errorControl.confirmPasswd.errors?.pattern || errorControl.confirmPasswd.errors?.minLength || errorControl.confirmPasswd.errors?.maxLength)\\\">\\n              *É nescessario que a senha tenha entre 6 a 30 caracteres, pelo menos uma letra maiuscula, uma letra minuscula, um numero e um caractere especial\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label>Esta Ativo?</ion-label>\\n              <ion-toggle color=\\\"danger\\\" formControlName=\\\"isActive\\\" checked></ion-toggle>\\n            </ion-item>\\n    \\n            <ion-item>\\n              <ion-label>Sera Sincronizado?</ion-label>\\n              <ion-toggle color=\\\"danger\\\" formControlName=\\\"issync\\\" checked></ion-toggle>\\n            </ion-item>\\n          </div>\\n          <div padding>\\n            <ion-button  size=\\\"large\\\" type=\\\"submit\\\" expand=\\\"block\\\">Registrar</ion-button>\\n            <ion-button  size=\\\"large\\\" expand=\\\"block\\\" routerLink='/'>Voltar</ion-button>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n  </form>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL291dHJvcy9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { sha512 } from 'js-sha512';\nimport { UserService } from '../../services/user.service';\nimport { User } from '../../models/user';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n  registerForm: FormGroup;\n  isSubmitted = false;\n  private userCreate: User;\n  // mismatchedPasswords: boolean;\n\n  constructor(public formBuilder: FormBuilder, private userService: UserService) { }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      nomeUsr: ['', [Validators.required]],\n      snUsr: ['', [Validators.required]],\n      usernameUsr: ['', [Validators.required]],\n      emailUsr: ['', [Validators.required, Validators.pattern(/[\\w\\.-]*[a-zA-Z0-9_]@[\\w\\.-]*[a-zA-Z0-9]\\.[a-zA-Z][a-zA-Z\\.]*[a-zA-Z]/)]],\n      celularUsr: ['', [Validators.required, Validators.pattern(/(\\(?\\d{2}\\)?\\s?)?(\\d{4,5}\\-?\\d{4})/)]],\n      passwd: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,30}$/)]],\n      confirmPasswd: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,30}$/)]],\n      isActive: [true, [Validators.required]],\n      issync: [true, [Validators.required]]\n    }, {validator: this.matchingPasswords.bind(this)});\n  }\n\n  register(){\n    this.isSubmitted = true;\n    if (!this.registerForm.valid) {\n      console.log('Please provide all the required values!');\n      return false;\n    } else {\n      //console.log(this.registerForm.value);\n      let hash = sha512.create().update(this.registerForm.value.passwd).hex();\n      //console.log(hash);\n      this.userCreate = {\n        username: this.registerForm.value.usernameUsr,\n        nome: this.registerForm.value.nomeUsr,\n        sobrenome: this.registerForm.value.snUsr,\n        email: this.registerForm.value.emailUsr,\n        celular: this.registerForm.value.celularUsr,\n        isActive: this.registerForm.value.isActive,\n        issync: this.registerForm.value.issync,\n        senha: hash\n      };\n      \n      //console.log(this.userCreate);\n\n      this.userService.createUserMongoDB(this.userCreate).subscribe((response) => {\n        console.log(response);\n      }, (err) => {\n        console.log(err);\n      });\n      // let hash2 = sha512.create().update(this.registerForm.value.passwd).hex();\n      // console.log(hash2);\n    }\n  }\n\n  // matchingPasswords(passwd: string, confirmPasswd: string) {\n  //   return (group: FormGroup): {[key: string]: any} => {\n  //     let password = group.controls[passwd];\n  //     let confirmPassword = group.controls[confirmPasswd];\n\n  //     if (password.value !== confirmPassword.value) {\n  //       return {\n  //         mismatchedPasswords: true\n  //       };\n  //     }\n  //   }\n  // }\n\n  matchingPasswords(formGroup: FormGroup) {\n    const { value: password } = formGroup.get('passwd');\n    const { value: confirmPassword } = formGroup.get('confirmPasswd');\n    return password === confirmPassword ? null : { passwordNotMatch: true };\n  }\n\n  get errorControl() {\n    return this.registerForm.controls;\n  }\n\n}\n"]}