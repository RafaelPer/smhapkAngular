{"version":3,"sources":["./src/app/outros/register/register.page.html","./src/app/outros/register/register-routing.module.ts","./src/app/outros/register/register.module.ts","./src/app/outros/register/register.page.scss","./src/app/outros/register/register.page.ts"],"names":[],"mappings":"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","file":"outros-register-register-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"danger\\\">\\n    <ion-title>Criar Conta</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content color=\\\"tertiary\\\">\\n  <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"register()\\\" novalidate>\\n    <ion-grid>\\n      <ion-row color=\\\"tertiary\\\" justify-content-center>\\n        <ion-col align-self-center size-md=\\\"6\\\" size-lg=\\\"5\\\" size-xs=\\\"12\\\" style=\\\"margin: 0px auto 0px auto !important;\\\">\\n          <div padding>\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Nome do Usuario</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o novo nome do usuario\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"nomeUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.nomeUsr.errors?.required\\\">\\n              *É nescessario o nome do usuario\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Sobrenome do Usuario</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o sobrenome do Usuario\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"snUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.snUsr.errors?.required\\\">\\n              *É nescessario o sobrenome do usuario\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Username</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o username do usuario\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"usernameUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.usernameUsr.errors?.required\\\">\\n              *É nescessario o username\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Email</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o email\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"emailUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.emailUsr.errors?.required\\\">\\n              *É nescessario o email\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.emailUsr.errors?.pattern\\\">\\n              *Email invalido\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Celular</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite o celular\\\" required=\\\"true\\\" type=\\\"text\\\" formControlName=\\\"celularUsr\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.celularUsr.errors?.required\\\">\\n              *É nescessario o celular\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.celularUsr.errors?.pattern\\\">\\n              *Celular invalido\\n            </ion-text>\\n\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Senha</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Digite a senha\\\" required=\\\"true\\\" type=\\\"password\\\" formControlName=\\\"passwd\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.passwd.errors?.required\\\">\\n              *É nescessario a senha\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && (errorControl.passwd.errors?.pattern || errorControl.passwd.errors?.minLength || errorControl.passwd.errors?.maxLength)\\\">\\n              *É nescessario que a senha tenha entre 6 a 30 caracteres, pelo menos uma letra maiuscula, uma letra minuscula, um numero e um caractere especial\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Confirme a Senha</ion-label>\\n              <ion-input  clearInput=\\\"true\\\" inputmode=\\\"text\\\" placeholder=\\\"Confirme a senha\\\" required=\\\"true\\\" type=\\\"password\\\" formControlName=\\\"confirmPasswd\\\"></ion-input>\\n            </ion-item>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && !registerForm.get('confirmPasswd').errors && registerForm.hasError('passwordNotMatch') && (registerForm.get('confirmPasswd').dirty || registerForm.get('confirmPasswd').touched)\\\">\\n              *A confirmação tem que ser igual a senha\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && errorControl.confirmPasswd.errors?.required\\\">\\n              *Confirme a senha\\n            </ion-text>\\n            <ion-text color=\\\"light\\\" *ngIf=\\\"isSubmitted && (errorControl.confirmPasswd.errors?.pattern || errorControl.confirmPasswd.errors?.minLength || errorControl.confirmPasswd.errors?.maxLength)\\\">\\n              *É nescessario que a senha tenha entre 6 a 30 caracteres, pelo menos uma letra maiuscula, uma letra minuscula, um numero e um caractere especial\\n            </ion-text>\\n    \\n            <ion-item>\\n              <ion-label>Esta Ativo?</ion-label>\\n              <ion-toggle color=\\\"danger\\\" formControlName=\\\"isActive\\\" checked></ion-toggle>\\n            </ion-item>\\n    \\n            <ion-item>\\n              <ion-label>Sera Sincronizado?</ion-label>\\n              <ion-toggle color=\\\"danger\\\" formControlName=\\\"issync\\\" checked></ion-toggle>\\n            </ion-item>\\n          </div>\\n          <div padding>\\n            <ion-button  size=\\\"large\\\" type=\\\"submit\\\" expand=\\\"block\\\">Registrar</ion-button>\\n            <ion-button  size=\\\"large\\\" expand=\\\"block\\\" routerLink='/'>Voltar</ion-button>\\n          </div>\\n        </ion-col>\\n      </ion-row>\\n    </ion-grid>\\n  </form>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL291dHJvcy9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { sha512 } from 'js-sha512';\nimport { UserService } from '../../services/user.service';\nimport { User } from '../../models/user';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n  registerForm: FormGroup;\n  isSubmitted = false;\n  private userCreate: User;\n  // mismatchedPasswords: boolean;\n\n  constructor(public formBuilder: FormBuilder, private userService: UserService) { }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      nomeUsr: ['', [Validators.required]],\n      snUsr: ['', [Validators.required]],\n      usernameUsr: ['', [Validators.required]],\n      emailUsr: ['', [Validators.required, Validators.pattern(/[\\w\\.-]*[a-zA-Z0-9_]@[\\w\\.-]*[a-zA-Z0-9]\\.[a-zA-Z][a-zA-Z\\.]*[a-zA-Z]/)]],\n      celularUsr: ['', [Validators.required, Validators.pattern(/(\\(?\\d{2}\\)?\\s?)?(\\d{4,5}\\-?\\d{4})/)]],\n      passwd: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,30}$/)]],\n      confirmPasswd: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(30), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,30}$/)]],\n      isActive: [true, [Validators.required]],\n      issync: [true, [Validators.required]]\n    }, {validator: this.matchingPasswords.bind(this)});\n  }\n\n  register(){\n    this.isSubmitted = true;\n    if (!this.registerForm.valid) {\n      console.log('Please provide all the required values!');\n      return false;\n    } else {\n      //console.log(this.registerForm.value);\n      let hash = sha512.create().update(this.registerForm.value.passwd).hex();\n      //console.log(hash);\n      this.userCreate = {\n        username: this.registerForm.value.usernameUsr,\n        nome: this.registerForm.value.nomeUsr,\n        sobrenome: this.registerForm.value.snUsr,\n        email: this.registerForm.value.emailUsr,\n        celular: this.registerForm.value.celularUsr,\n        isActive: this.registerForm.value.isActive,\n        issync: this.registerForm.value.issync,\n        senha: hash\n      };\n      \n      //console.log(this.userCreate);\n\n      this.userService.createUserMongoDB(this.userCreate).subscribe((response) => {\n        console.log(response);\n      }, (err) => {\n        console.log(err);\n      });\n      // let hash2 = sha512.create().update(this.registerForm.value.passwd).hex();\n      // console.log(hash2);\n    }\n  }\n\n  // matchingPasswords(passwd: string, confirmPasswd: string) {\n  //   return (group: FormGroup): {[key: string]: any} => {\n  //     let password = group.controls[passwd];\n  //     let confirmPassword = group.controls[confirmPasswd];\n\n  //     if (password.value !== confirmPassword.value) {\n  //       return {\n  //         mismatchedPasswords: true\n  //       };\n  //     }\n  //   }\n  // }\n\n  matchingPasswords(formGroup: FormGroup) {\n    const { value: password } = formGroup.get('passwd');\n    const { value: confirmPassword } = formGroup.get('confirmPasswd');\n    return password === confirmPassword ? null : { passwordNotMatch: true };\n  }\n\n  get errorControl() {\n    return this.registerForm.controls;\n  }\n\n}\n"],"sourceRoot":"webpack:///"}